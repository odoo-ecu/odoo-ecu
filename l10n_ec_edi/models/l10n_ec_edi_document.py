
from random import randint
from odoo import _, api, fields, models, tools

class EcuEdiDocument(models.Model):

    _name = 'l10nec.edi.document'
    _description = 'Ecuadorian Edi Document'

    # == Stored fields ==
    name = fields.Char("Name")
    state = fields.Selection([('to_send', 'To Send'), ('sent', 'Sent'), ('authorized', 'Authorized'), ('to_cancel', 'To Cancel'), ('cancelled', 'Cancelled')])
    attachment_id = fields.Many2one('ir.attachment', help='The file generated by edi_format_id when the invoice is posted (and this document is processed).')
    error = fields.Html(help='The text of the last error that happened during Electronic Invoice operation.')
    xml_content = fields.Text(help="XML content generated by document")
    authorization_date = fields.Datetime("Authorization Date")
    ecu_document_type = fields.Selection(
        [('01', 'Invoice'),
         ('03', 'Accounting clearance for goods purchasing and provision of services'),
         ('04', 'Credit Note'),
         ('05', 'Debit Note'),
         ('06', 'Waybill'),
         ('07', 'Withholding voucher')],
        string="Document Type")
    model = fields.Char(string='Model Name', required=True)
    res_id = fields.Many2oneReference(string='Record ID', help="ID of the target record in the database", model_field='model')
    comm_direction = fields.Selection([('export', 'Export'), ('import', 'Import')], string="Communication Direction")

    @api.model
    def compute_check_digit(
            self, number,
            factors='765432765432765432765432765432765432765432765432'):
        # Electronic voucher data sheet, p. 4
        # Modulus 11 checking method
        if not all([d.isdigit() for d in number]):
            return -1
        cd = 11 - sum([int(x[0])*int(x[1]) for x in zip(number, factors)]) % 11
        if cd == 11: return 0 # when check digit is 11 return 0. Data sheet p. 4
        if cd == 10: return 1 # when check digit is 10 return 1. Data sheet p. 4
        return cd

    @api.model
    def is_valid(self, number):
        if not all([d.isdigit() for d in number]):
            return False
        return self.compute_check_digit(number) == int(number[-1])

    @api.model
    def compute_numeric_code(self):
        return "".join([str(randint(0, 9)) for i in range(8)])
